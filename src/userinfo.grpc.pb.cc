// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: userinfo.proto

#include "userinfo.pb.h"
#include "userinfo.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace userinfo {

static const char* SendMessage_method_names[] = {
  "/userinfo.SendMessage/sendMessage",
};

std::unique_ptr< SendMessage::Stub> SendMessage::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< SendMessage::Stub> stub(new SendMessage::Stub(channel));
  return stub;
}

SendMessage::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_sendMessage_(SendMessage_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SendMessage::Stub::sendMessage(::grpc::ClientContext* context, const ::userinfo::UserRequest& request, ::userinfo::UserReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_sendMessage_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::userinfo::UserReply>* SendMessage::Stub::AsyncsendMessageRaw(::grpc::ClientContext* context, const ::userinfo::UserRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::userinfo::UserReply>(channel_.get(), cq, rpcmethod_sendMessage_, context, request);
}

SendMessage::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      SendMessage_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< SendMessage::Service, ::userinfo::UserRequest, ::userinfo::UserReply>(
          std::mem_fn(&SendMessage::Service::sendMessage), this)));
}

SendMessage::Service::~Service() {
}

::grpc::Status SendMessage::Service::sendMessage(::grpc::ServerContext* context, const ::userinfo::UserRequest* request, ::userinfo::UserReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace userinfo

